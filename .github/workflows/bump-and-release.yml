name: Auto Version Bump

permissions:
  contents: write
  id-token: write

on:
  push:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version_bump:
    if: ${{ github.repository == 'ibrahimtopcu11/tree_height_analysis_57' && !contains(github.event.head_commit.message, '[skip version]') }}
    name: Bump version and create tag
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomlkit

      - name: Get current version and bump
        id: version
        run: |
          python << 'EOF'
          import tomlkit
          import os

          with open('pyproject.toml', 'r') as f:
              data = tomlkit.load(f)
          current_version = data['project']['version']
          parts = current_version.split('.')
          major, minor, patch = int(parts[0]), int(parts[1]), int(parts[2])
          bump_type = "${{ github.event.inputs.version_type or 'patch' }}"
          if bump_type == 'major':
              major += 1; minor = 0; patch = 0
          elif bump_type == 'minor':
              minor += 1; patch = 0
          else:
              patch += 1
          new_version = f"{major}.{minor}.{patch}"
          data['project']['version'] = new_version
          with open('pyproject.toml', 'w') as f:
              tomlkit.dump(data, f)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"old_version={current_version}\n")
              f.write(f"new_version={new_version}\n")
          EOF

      - name: Update __init__.py version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" src/tree_height_analysis_57/__init__.py

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git add src/tree_height_analysis_57/__init__.py 2>/dev/null || true
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }} [skip ci]"

      - name: Create and push tag
        run: |
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"
